export const code = `import { Inter } from "next/font/google";
import "./globals.css";
import Topnav from "@/components/TopNav";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Topnav />{children}</body>
    </html>
  );
}
`;

export const indexCode = `"use client";

import styles from "./style.module.scss";
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Nav from "./Nav";
import Button from "./Botton";

const variants = {
  open: {
    width: 440,
    height: 500,
    top: "-10px",
    right: "-10px",
    transition: { duration: 0.75, type: "tween", ease: [0.76, 0, 0.24, 1] },
  },
  closed: {
    width: 100,
    height: 40,
    top: "0px",
    right: "0px",
    transition: {
      duration: 0.75,
      delay: 0.35,
      type: "tween",
      ease: [0.76, 0, 0.24, 1],
    },
  },
};

export default function Topnav() {
  const [isActive, setIsActive] = useState(false);

  return (
    <div className={styles.header}>
      <div className={styles.main}>
        <motion.div
          variants={variants}
          animate={isActive ? "open" : "closed"}
          initial="closed"
          className={styles.menu}
        >
          <AnimatePresence>{isActive && <Nav />}</AnimatePresence>
        </motion.div>
        <Button isActive={isActive} setIsActive={setIsActive} />
      </div>
    </div>
  );
}
`;

export const indexStyle = `.header{
  position: absolute;
  // margin-left: %;
  margin-top: 7%;
  display: flex;
  z-index: 99;
  color: white;
  padding: 35px;
  padding-bottom: 0px;
  justify-content: space-between;
  width: 86.5%;
  font-weight: 300;
  box-sizing: border-box;
  align-items: center;
  font-family: Boeing;
  
  .logo{
      display: flex;
      align-items: center;
      cursor: pointer;
      padding-left: 10px;
      .copyright{
          position: relative;
          font-size: 22px;
      }
      a {
          text-decoration: none;  // Remove underline
          color: white;           // Set the desired color for the links
  
          &:hover {
              color:white;
              // Add any additional styles for the hover effect
          }
      }
      p{
          margin: 0px;
          transition: all 0.5s cubic-bezier(0.76, 0, 0.24, 1);
      }
      .name{
          display: flex;
          position: relative;
          overflow: hidden;
          align-items: baseline;
          white-space: nowrap;
          margin-left: 10px;
          transition: all 0.5s cubic-bezier(0.76, 0, 0.24, 1);
          p{
              position: relative;
              transition: transform 0.5s cubic-bezier(0.76, 0, 0.24, 1);
              &:nth-of-type(2){
                  padding-left: 0.3em;
              }
              &:nth-of-type(3){
                  position: absolute;
                  left: 120px;
                  padding-left: 3.8em;
              }
          }
      }
      &:hover{
          .copyright{
              transform: rotate(360deg);
          }
          .name{
              padding-right: 30px;
              .codeBy{
                  transform: translateX(-100%);
              }
              .dennis{
                  transform: translateX(-65px);
              }
              .snellenberg{
                  transform: translateX(-65px);
              }
          }
      }
  }
  .nav{
      display: flex;
      align-items: center;

      .el{
          display: flex;
          flex-direction: column;
          position: relative;
          z-index: 1;
          padding: 15px;
          cursor: pointer;
          &:hover{
              .indicator{
                  transform: scale(1);
              }
          }
          .indicator{
              position: absolute;
              width: 5px;
              height: 5px;
              top: 45px;
              left: 50%;
              background-color: white;
              border-radius: 50%;
              transform: scale(0) translateX(-50%);
              transition: transform 0.2s cubic-bezier(0.76, 0, 0.24, 1);
          }
          a {
              text-decoration: none;  // Remove underline
              color: white;           // Set the desired color for the links
      
              &:hover {
                  color: white;
                  // Add any additional styles for the hover effect
              }
          }
      }
      a{
          cursor: pointer;
      }
  } 
}
.main{
  position: fixed;
  transform: scale(1);
  right: 50px;
  z-index: 99;
  top: 50px;
  color: white;
  z-index: 99;

  .menu{
      position: relative;
      border-radius: 25px;
      width: 440px;
      opacity: 1;
      height: 500px;
      background-color: black;
      box-shadow: 0px 0px 50px white;
  }
}

`;

export const navData = `export const Links = [
  {
      title : "Home",
      href : "/"
  },
  {
      title : "Work",
      href : "/Work"
  },
  {
      title : "About",
      href : "/About"
  },{
      title : "Contact",
      href : "/Contact"
  },{
      title : "Test",
      href : "/Test"

  } 
]

export const FooterLink = [
  {
      title : "Instagram",
      href : "/Work"
  },
  {
      title : "Linkedin",
      href : "/Work"
  },
  {
      title : "Twitter",
      href : "/Work"
  },
  {
      title : "Set a Zoom",
      href : "/Work"
  },
]`;

export const navIndex = `import React from "react";
import styles from "./style.module.scss";
import { Links, FooterLink } from "./data";
import { motion } from "framer-motion";
import Link from "next/link";

const perspective = {
  initial: {
    opacity: 0,
    rotateX: 90,
    translateY: 80,
    translateX: -20,
  },

  enter: (i) => ({
    opacity: 1,
    rotateX: 0,
    translateY: 0,
    translateX: 0,
    transition: {
      duration: 0.65,
      delay: 0.5 + i * 0.1,
      ease: [0.215, 0.61, 0.355, 1],
      opacity: { duration: 0.35 },
    },
  }),
  exit: {
    opacity: 0,
    transition: { duration: 0.5, type: "linear", ease: [0.76, 0, 0.24, 1] },
  },
};

const slideIn = {
  initial: {
    opacity: 0,
    y:20
  },

  enter: (i) => ({
    opacity: 1,
    y:0,
    transition: {
      duration: 0.5,
      delay: 0.75 + i * 0.1,
      ease: [0.215, 0.61, 0.355, 1],
    },
  }),
  exit: {
    opacity: 0,
    transition: { duration: 0.5, type: "linear", ease: [0.76, 0, 0.24, 1] },
  },
};

export default function Nav() {
  return (
    <div className={styles.nav}>
      <div className={styles.body}>
        {Links.map((link, i) => {
          return (
            <div key={\`b_\${i}\`} className={styles.linkContainer}>
              <motion.div
                variants={perspective}
                custom={i}
                initial="initial"
                animate="enter"
                exit="exit"
              >
                <Link href={link.href}>{link.title}</Link>
              </motion.div>
            </div>
          );
        })}
      </div>
      <div className={styles.footer}>
        {FooterLink.map((link, i) => {
          return (
              <motion.a
              key={\`f_\${i}\`}
                variants={slideIn}
                custom={i}
                href={link.href}
                initial="initial"
                animate="enter"
                exit="exit"
              >
                {link.title}
              </motion.a>

          );
        })}
      </div>
    </div>
  );
}
`;

export const navStyle = `.nav {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
  padding: 50px 40px 50px 40px;
  box-sizing: border-box;

  .body {
    display: flex;
    gap: 10px;
    flex-direction: column;

    .linkContainer {
  // perspective: 120px;
  //   perspective-origin: right;
    }
    a {
      color: white;
      text-decoration: none;
      font-size: 46px;
    }
    
  }
  .footer{
    display: flex;
    flex-wrap: wrap;
    a{
      width: 50%;
      color: white;
      text-decoration: none;
    }
  }
}


`;

export const buttonIndex = `import styles from "./style.module.scss";
import { motion } from "framer-motion";

export default function Button({ isActive, setIsActive, ref }) {
  return (
    <div
      onClick={() => {
        setIsActive(!isActive);
      }}
      className={styles.button}
      ref={ref} // Pass the ref directly to the outermost element
    >
      <motion.div
        className={styles.slider}
        animate={{ top: isActive ? "-100%" : "0" }}
        transition={{ duration: 0.5, ease: [0.75, 0, 0.24, 1] }}
      >
        <div className={styles.el}>
          <PerspectiveText label="Menu" />
        </div>
        <div className={styles.el}>
          <PerspectiveText label="Close" />
        </div>
      </motion.div>
    </div>
  );
}

const PerspectiveText = ({ label }) => {
  return (
    <div className={styles.persPectiveText}>
      <p>{label}</p>
      <p>{label}</p>
    </div>
  );
};
`;

export const buttonStyle = `.button{
  height: 40px;
  width: 100px;
  border-radius: 25px;
  cursor: pointer;
  top: 0;
  right: 0;
  position: fixed;
  overflow: hidden;
  .slider{
      position: relative;
      width:100%;
      height: 100%;
      .el{
          height: 100%;
          width: 100%;
          // background-color: transparent;
          //text-transform: uppercase;
  
          &:nth-of-type(2){
              position: absolute;
              background-color: white;
              color: black;
              top: 100%;
          }
          &:hover{
              .persPectiveText{
                  transform: rotateX(90deg);
                  

                  p{
                      &:nth-of-type(1){
                          transform: translateY(-100%);
                          opacity: 0;
                      }
                      &:nth-of-type(2){
                          opacity: 1;
                      }
                  }
              }
          }
  
      }

      .persPectiveText{
          width: 100%;
          height: 100%;
          display: flex;
          align-items: center;
          justify-content: center;
          transition: transform 0.75s cubic-bezier(0.76, 0, 0.24, 1);
          transform-style: preserve-3d;
          p{
              transition: all 0.75s cubic-bezier(0.76, 0, 0.24, 1);
              &:nth-of-type(2){
                  position: absolute;
                  transform: rotateX(-90deg) translateY(9px);
                  opacity: 0;
                  transform-origin: bottom center;
                 // background-color: black;
                  //top: 100%;
              }
          }
      }
  }

  }

  @media (max-width:450px) {
      .button{
          // width: 80px;
      }
  }
`;


export const theadComponent = {
  title1 : "Perspective Navbar",
  title2 : "Build an Awwwards Perspective Menu using Nextjs and Framer Motion.",
  decscription1 : "A website tutorial featuring an ",
  date:"April 21, 2024",
  span:"Awwwards Perspective menu,",
  decscription2: " made with Next.js and Framer Motion. Using motion from Framer Motion and perspective text feature from css we can create this good looking masterpiece.",
  demoLink : "https://live-demo-sigma.vercel.app/Perspective-Navbar",
  SourceCode : "https://github.com/21SINGH/Perspective-Navbar",
  video : 'https://www.youtube.com/embed/s6XHRGnIQis'
}